{"name":"HotTubTempCtrl","description":"Use this control to display status of your HotTub.  Is open for the water to flow to the hottub or is it open for the water to flow from the hottuub.","code":"\"use strict\";\r\n/*\r\n    Use this control to display the state of a hottub\r\n*/\r\nclass HotTubTempCtrl extends ControlElement {\r\n    constructor(idExtender, left, top, width, height, statusResponse) {\r\n        super('hot-tub-temp-ctrl', idExtender, left, top);\r\n        var svg = super.getSvg();\r\n        svg.attr('width', width);\r\n        svg.attr('height', height);\r\n\r\n        this.init(statusResponse);\r\n    }\r\n    calculateWaterLevel(downloadLogs) {\r\n        if (downloadLogs === true) {\r\n            this.getLogs((data) => {\r\n                this.log = data;\r\n                this.calculateWaterLevel(false);\r\n            });\r\n            return;\r\n        }\r\n        var start = 0;       \r\n        var data = JSON.parse(JSON.stringify(this.log));\r\n        data.forEach(element => {\r\n            element.data = JSON.parse(element.data);\r\n        });\r\n        data[start].flow = 0;\r\n        data[start].flowSeconds = 0;\r\n        data[start].flowUnits = 0;\r\n        data[start].sumFlowUnits = 0;\r\n\r\n        data.push({\r\n            datetime: new Date().toString(),\r\n            flow: 0,\r\n            flowSeconds: 0,\r\n            flowUnits: 0,\r\n            sumFlowUnits: 0,\r\n            waterLevel: 0,\r\n\r\n            data: [\r\n                { \"pin\": 50, \"val\": this.hotValveFlow * 1023, \"m\": 4, \"name\": \"valveHot\" },\r\n                { \"pin\": 51, \"val\": this.coldValveFlow * 1023, \"m\": 4, \"name\": \"valveCold\" },\r\n                { \"pin\": 52, \"val\": this.drainValveFlow * 1023, \"m\": 4, \"name\": \"valveDrain\" },\r\n                { \"pin\": 53, \"val\": this.currentPressure * 1023, \"m\": 4, \"name\": \"pressure\" },\r\n                { \"pin\": 54, \"val\": this.currentTemperature * 1023, \"m\": 4, \"name\": \"temperature\" },\r\n                { \"pin\": 55, \"val\": this.desiredTemperature * 1023, \"m\": 4, \"name\": \"desiredTemperature\" }\r\n            ]\r\n\r\n        });\r\n\r\n        for (var i = start + 1; i < data.length; i++) {\r\n            data[i].date = new Date(data[i].datetime);\r\n            this.calculateWatherFlow(data[i - 1], data[i], i);\r\n        }\r\n\r\n        this.setWaterLevel(data[data.length - 1].waterLevel);\r\n\r\n        setTimeout(() => {\r\n            this.calculateWaterLevel(false);\r\n        }, 5000);\r\n    }\r\n    calculateWatherFlow(prevObject, currentObject) {\r\n\r\n        var fillFlowUnits = this.fillSeconds * 1023;\r\n        var prevDate = new Date(prevObject.datetime);\r\n        var currDate = new Date(currentObject.datetime);\r\n        var diffMillis = (currDate.getTime() - prevDate.getTime());\r\n        var diffSeconds = (diffMillis / 1000);\r\n        var drainValue = prevObject.data.filter(item => item.name === \"valveDrain\")[0].val;\r\n        var hotValue = prevObject.data.filter(item => item.name === \"valveHot\")[0].val;\r\n        var coldValue = prevObject.data.filter(item => item.name === \"valveCold\")[0].val;\r\n        var fillValue = coldValue > hotValue ? coldValue : hotValue;\r\n        if (drainValue > 0) {\r\n            currentObject.flow = drainValue * (this.fillSeconds / this.drainSeconds) * -1;\r\n        } else {\r\n            currentObject.flow = fillValue;\r\n        }\r\n\r\n\r\n        currentObject.flowSeconds = diffSeconds;\r\n        currentObject.flowUnits = diffSeconds * currentObject.flow;\r\n\r\n        currentObject.sumFlowUnits = prevObject.sumFlowUnits + currentObject.flowUnits;\r\n        if (currentObject.sumFlowUnits < 0) {\r\n            currentObject.sumFlowUnits = 0;\r\n        } else if (currentObject.sumFlowUnits > fillFlowUnits) {\r\n            currentObject.sumFlowUnits = fillFlowUnits;\r\n        }\r\n        //currentObject.waterLevel = Math.round((currentObject.sumFlowUnits / fillFlowUnits) * 1000);\r\n        currentObject.waterLevel = (currentObject.sumFlowUnits / fillFlowUnits) * 100;\r\n    }\r\n    getServer(){\r\n        return window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\r\n    }\r\n\r\n    getLogs(resolve) {\r\n        var url = this.getServer() + '/logs/list/' + this.deviceId;\r\n        var request = $.get(url);\r\n        request.done(function (data) {\r\n            if (data.length < 1) {\r\n            } else {\r\n                this.logger = data;\r\n                resolve(data);\r\n            }\r\n        }).fail(function (data) {\r\n            console.log(\"rejecting\");\r\n        });\r\n    }\r\n\r\n    init(statusResponse) {\r\n        this.deviceId = statusResponse.deviceId;\r\n        this.log = [];\r\n        this.setWaterLevel(0);\r\n        // DrainTimeRequired : 10:00:00 -> 10*60*60   = 36000 sec\r\n        // FillTimeRequired  : 01:10:00 -> (70*60)+0 = 4200 sec\r\n        this.setFlowTimeInSeconds(4200, 36000);\r\n        this.setStatus(statusResponse);\r\n        var that = this;\r\n        this.getUpdateButton().on('click', function (e) {\r\n            var currentVal = that.getDesiredTemperatureInput().val();\r\n            var sendObj = {\r\n                cmd:'update',\r\n                temperature: currentVal\r\n            };\r\n            var url = that.getServer()+'/devices/custom/'+ that.deviceId;\r\n            var posting = $.post( url, sendObj);\r\n            posting.done(function(data){\r\n                 console.log(`update res: ${JSON.stringify(data, null, 4)}`);\r\n            });\r\n            that.calculateWaterLevel(true);\r\n        });\r\n        this.calculateWaterLevel(true);\r\n    }\r\n    isFilling() { return this.coldValveFlow > 0 || this.hotValveFlow > 0; }\r\n    isDraining() { return this.drainValveFlow > 0; }\r\n    isStopped() { return this.coldValveFlow === 0 && this.hotValveFlow === 0 && this.drainValveFlow === 0; }\r\n\r\n    setStatus(status) {\r\n        this.hotValveFlow = status.mixer.hotValveFlow;\r\n        this.coldValveFlow = status.mixer.coldValveFlow;\r\n        this.currentPressure = status.mixer.currentPressure;\r\n        this.currentTemperature = status.mixer.currentTemperature;\r\n        this.desiredTemperature = status.mixer.desiredTemperature;\r\n        this.drainValveFlow = status.mixer.drainValveFlow;\r\n        this.mode = status.mixer.mode;\r\n        \r\n        if (this.hotValveFlow > 0 || this.coldValveFlow > 0 ) {\r\n            this.fill(this.hotValveFlow, this.coldValveFlow);\r\n        } else  if (this.drainValveFlow > 0) {\r\n            this.drain();\r\n        } else {\r\n            this.stop();\r\n        }\r\n        // if (this.isStopped()) {\r\n        //     //when all is stopped, we can read the waterlevel from pressure sensor\r\n        //     this.setWaterLevel((this.currentPressure / 0.46) * 100);//pressure 0.46 means full\r\n        //     this.stop();\r\n        // } else if (this.isFilling()) {\r\n        //     this.drawFill(this.hotValveFlow, this.coldValveFlow);\r\n        // } else if (this.isDraining()) {\r\n        //     this.drain();\r\n        // }\r\n\r\n        this.getDesiredTemperatureInput().val(this.desiredTemperature);\r\n        this.getCurrentTemperatureDiv().text(this.currentTemperature);\r\n        this.getCurrentPressureDiv().text(this.currentPressure);\r\n        //super.scale($('#' + super.getId()), value);\r\n    }\r\n    scale(value) {\r\n        super.scale(this.getLight(), value);\r\n        //super.scale($('#' + super.getId()), value);\r\n    }\r\n    rotate(degrees) {\r\n        super.rotate(this.getLight(), degrees);\r\n    }\r\n    getBlob() {\r\n        return $('#' + super.getId() + ' div.blob');\r\n    }\r\n    getLine() {\r\n        return $('#' + super.getId() + ' > svg > line');\r\n    }\r\n    getDesiredTemperatureInput() {\r\n        return $('#' + super.getId() + ' input[name=\"desired-temperature\"]');\r\n    }\r\n    getCurrentTemperatureDiv() {\r\n        return $('#' + super.getId() + ' .current-temperature-value');\r\n    }\r\n    getCurrentPressureDiv() {\r\n        return $('#' + super.getId() + ' .current-pressure-value');\r\n    }\r\n    getWaterLevelText() {\r\n        return $('#' + super.getId() + ' div.water-level-text');\r\n    }\r\n    getFlowText() {\r\n        return $('#' + super.getId() + ' div.flow-text');\r\n    }\r\n    getUpdateButton() {\r\n        return $('#' + super.getId() + ' .btn-update');\r\n    }\r\n\r\n    setValue(value) {\r\n        if (this.drainPin.value > 0) {\r\n            this.drain();\r\n\r\n        } else if (this.fillPin.value > 0) {\r\n            this.fill(this.fillPin.value);\r\n        } else {\r\n            this.stop();\r\n        }\r\n        this.active(true);\r\n    }\r\n\r\n    active(isActive) {\r\n        var classRemoving, classAdding;\r\n        if (isActive) {\r\n            classRemoving = 'set-inactive'; classAdding = 'set-active';\r\n        } else {\r\n            classRemoving = 'set-active'; classAdding = 'set-inactive';\r\n        }\r\n        this.getBlob().removeClass(classRemoving).addClass(classAdding);\r\n        this.getLine().removeClass(classRemoving).addClass(classAdding);\r\n\r\n    }\r\n    fill(hotFlow, coldFlow) {\r\n        if (hotFlow === 0 && coldFlow === 0 ) {\r\n            this.stop();\r\n        } else {\r\n            this.drawFill(hotFlow, coldFlow);\r\n            this.reCalculate();\r\n        }\r\n    }\r\n    reCalculate(waitDelay = 20000) {\r\n        \r\n        clearTimeout(this.reCalculateTimer);\r\n        this.reCalculateTimer = setTimeout(() => {\r\n            this.calculateWaterLevel(true);\r\n        }, waitDelay);\r\n    }\r\n    drain() { this.drawDrain(); this.reCalculate(); }\r\n    stop() { this.drawStop(); this.reCalculate(); }\r\n\r\n    drawFill(hotFlow, clodFlow) {\r\n        this.active(this.isFilling());\r\n        var value = hotFlow > clodFlow ? hotFlow : clodFlow;\r\n        var maxSpeed = 0.95, minSpeed = 7.0, maxNegative = (minSpeed - maxSpeed);\r\n        var ratio = value / 100;\r\n        var negative = ratio * maxNegative;\r\n        var speed = minSpeed - negative;\r\n        speed *= 100; speed = Math.round(speed); speed /= 100;\r\n        var dur = speed + 's';\r\n        this.getBlob().removeClass('hiding').addClass('showing');\r\n        this.getBlob().removeClass('drain-hottub').addClass('fill-hottub');\r\n        this.getBlob().css(\"animation-duration\", function (index) {\r\n            return speed + 's';\r\n        });\r\n\r\n    }\r\n\r\n    drawStop() {\r\n        this.getBlob().removeClass('showing').addClass('hiding');\r\n        this.active(this.isStopped());\r\n    }\r\n\r\n    drawDrain() {\r\n        var blob = this.getBlob();\r\n        this.active(this.isDraining());\r\n        blob.removeClass('hiding').addClass('showing');\r\n        blob.removeClass('fill-hottub').addClass('drain-hottub');\r\n        this.getBlob().css(\"animation-duration\", function (index) {\r\n            return '2s';\r\n        });\r\n    }\r\n\r\n    setWaterLevel(procent) {\r\n        this.waterLevel = procent;\r\n        // this.waterLevel = Math.round(procent * 10) / 10;//round to one decimals\r\n        this.drawWaterLevel();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {How many seconds does it take to completely fill the hot tub} fillTimeRequiredInSeconds \r\n     * @param {How many seconds does it take to completely drain the hot tub} drainTimeRequiredInSeconds \r\n     */\r\n    setFlowTimeInSeconds(fillTimeRequiredInSeconds, drainTimeRequiredInSeconds) {\r\n        this.fillSeconds = fillTimeRequiredInSeconds;\r\n        this.drainSeconds = drainTimeRequiredInSeconds;\r\n        this.fillMinutes = this.fillSeconds / 60;\r\n    }\r\n\r\n    drawWaterLevel() {\r\n        if (this.waterLevel < 0) {\r\n            this.waterLevel = 0;\r\n        } else if (this.waterLevel > 100) {\r\n            this.waterLevel = 100;\r\n        }\r\n\r\n        var waterLevelText = `${Math.round(this.waterLevel * 10) / 10}%`;\r\n\r\n        // cy   = 75 when waterLevel === 100\r\n        // cy   = 120 when waterLevel === 0\r\n        // diff = 45 when waterLevel === 100\r\n        var MAX = 120, MIN = 75, DIFF = MAX - MIN, add;\r\n        var cx, cy, rx, ry, steps = 20;\r\n        add = DIFF * (this.waterLevel / 100);\r\n        cx = 223; cy = MAX - add; rx = 88; ry = 26;\r\n        //cx=\"223\" cy=\"87\" rx=\"88\" ry=\"26\"\r\n\r\n        if (this.waterLevel > 83) {\r\n\r\n            var cyDiff = -16, rxDiff = 11, ryDiff = 5,\r\n                cyChange, rxChange, ryChange;\r\n            var stepCount = (100 - this.waterLevel);\r\n            var portion = stepCount / steps;\r\n            cyChange = portion * cyDiff;\r\n            rxChange = portion * rxDiff;\r\n            ryChange = portion * ryDiff;\r\n            cy = 71 - cyChange;\r\n            rx = 100 - rxChange;\r\n            ry = 31 - ryChange;\r\n        }\r\n\r\n        var $elm = $('ellipse.vatn');\r\n        $elm.attr('cx', cx);\r\n        $elm.attr('cy', cy);\r\n        $elm.attr('rx', rx);\r\n        $elm.attr('ry', ry);\r\n\r\n        if (this.waterLevel === 0) {\r\n            $elm.removeClass('blatt').addClass('bottom-hottub');\r\n        }\r\n        else {\r\n            $elm.removeClass('bottom-hottub').addClass('blatt');\r\n        }\r\n\r\n        this.getWaterLevelText().text(waterLevelText);\r\n        this.getFlowText().text(\" \");\r\n        if (this.isFilling() || this.isDraining() ) {\r\n\r\n            var secondsLeft = 0, power = 0, hours = 0, minutes = 0;\r\n            var flowValue;\r\n            var waterLeftPros;\r\n            if (this.isFilling()) {\r\n                flowValue = this.hotValveFlow > this.coldValveFlow? this.hotValveFlow: this.coldValveFlow;\r\n                waterLeftPros = 100 - this.waterLevel;\r\n                power = flowValue / 100;\r\n                secondsLeft = ((waterLeftPros / 100) * this.fillSeconds ) * power ;\r\n            } else if (this.isDraining() > 0) {\r\n                flowValue = this.drainValveFlow;\r\n                waterLeftPros = this.waterLevel;\r\n                power = flowValue / 100;\r\n                secondsLeft = ((waterLeftPros / 100) * this.drainSeconds ) * power ;\r\n            }\r\n            var minutesLeft = secondsLeft / 60;\r\n            var hoursFrag = minutesLeft / 60;\r\n            hours = parseInt(hoursFrag);\r\n            minutes = Math.round((hoursFrag - hours) * 60);\r\n\r\n            //full after\r\n            var remainingTimeString = zeroFirst(hours) + ':' + zeroFirst(minutes);\r\n            // this.getFlowText().text(remainingTimeString);\r\n\r\n\r\n            //full at\r\n            var d = new Date(); // for now\r\n            d.setHours(d.getHours() + hours);\r\n            d.setMinutes(d.getMinutes() + minutes);\r\n\r\n            var timeFull = zeroFirst(d.getHours()) + ':' + zeroFirst(d.getMinutes());\r\n            this.getFlowText().text(`${timeFull} (${remainingTimeString})`);\r\n        }\r\n    }\r\n}//class\r\n","helpurl":"","template":"<div  id=\"hot-tub-temp-ctrl\"  style=\"position:absolute;display: inline-block\">\r\n\r\n    <style>\r\n        .water-level-text{\r\n            top: 50px;\r\n            left: 217px;\r\n            position: absolute;\r\n        }\r\n        .flow-text {\r\n            position: relative;\r\n            top:-40px;\r\n            left:25px;\r\n        }\r\n        .showing{\r\n            visibility:visible;\r\n        }\r\n        .hiding{\r\n            visibility:hidden;\r\n        }\r\n        \r\n        .set-active{\r\n            background: #f9ee27;\r\n            stroke:#f9ef2a;\r\n            fill:#f9ee27;\r\n            \r\n            \r\n        }\r\n        .set-inactive{\r\n            background:gray;\r\n            stroke:gray;\r\n            fill:gray;\r\n        }\r\n        \r\n        .desired {\r\n            position: relative;\r\n            top: -5px;\r\n            left: 116px;\r\n        }\r\n        input[name=\"desired-temperature\"] {\r\n                width: 62px;\r\n        }\r\n        .current-temperature {\r\n                position: relative;\r\n                left: 120px;\r\n        }\r\n        .current-pressure {\r\n            position: relative;\r\n            left: 120px;\r\n            top: 0px;\r\n        }\r\n        .current-temperature-value,.current-pressure-value{\r\n            font-weight:bold;\r\n        }\r\n        .blatt{\r\n        \tfill:#1e1efe;stroke:#1e1efe;stroke-width:0\r\n        }\r\n        .bottom-hottub{\r\n        \tfill:darkgray;stroke:darkgray;stroke-width:0\r\n        }\r\n        .svart{\r\n        \tfill:black;stroke:black;stroke-width:2\r\n        }\r\n        .orange{\r\n        \tfill:orange;stroke:orange;stroke-width:2\r\n        }\r\n        .inside-hottub{\r\n            \tfill:gray;stroke:gray;stroke-width:2\r\n        }\r\n        \r\n        div.blob-white-box {\r\n            background: white;\r\n            height: 16px;\r\n            width: 35px;\r\n            position: absolute;\r\n            top: 148px;\r\n            left: -24px;\r\n        }\r\n        \r\n        .blob {\r\n            z-index:-1;\r\n          left:0px;\r\n          position:relative;\r\n          width: 25px;\r\n          height: 8px;\r\n          border-radius: 50%;\r\n          -webkit-backface-visibility: hidden;\r\n           -moz-backface-visibility: hidden;\r\n           -ms-backface-visibility: hidden;\r\n           backface-visibility: hidden;\r\n        \r\n           -webkit-perspective: 1000;\r\n           -moz-perspective: 1000;\r\n           -ms-perspective: 1000;\r\n           perspective: 1000;\r\n          -webkit-transform: translate3d(0, 0, 0);\r\n           -moz-transform: translate3d(0, 0, 0);\r\n           -ms-transform: translate3d(0, 0, 0);\r\n           transform: translate3d(0, 0, 0);\r\n        }\r\n        \r\n        .drain-hottub{\r\n            -webkit-animation: drain 9s infinite; /* Safari 4.0 - 8.0 */\r\n            -webkit-animation-timing-function: linear; /* Safari 4.0 - 8.0 */\r\n            animation: drain 9s infinite;\r\n            animation-timing-function: linear; \r\n        }\r\n        \r\n        .fill-hottub {\r\n            -webkit-animation: fill 9s infinite; /* Safari 4.0 - 8.0 */\r\n            -webkit-animation-timing-function: linear; /* Safari 4.0 - 8.0 */\r\n            animation: fill 9s infinite;\r\n            animation-timing-function: linear; \r\n        }\r\n        \r\n        /* Safari 4.0 - 8.0 */\r\n        @-webkit-keyframes fill {\r\n            0%   {left:-25px; top:149px;}\r\n            100% {left:130px; top:149px;}\r\n        }\r\n        \r\n        /* Standard syntax */\r\n        @keyframes fill {\r\n            0%   {left:-25px; top:149px;}\r\n            100% {left:130px; top:149px;}\r\n        }\r\n        /* Safari 4.0 - 8.0 */\r\n        @-webkit-keyframes drain {\r\n            0%   {left:130px; top:149px;}\r\n            100% {left:-5px; top:149px;}\r\n        }\r\n        \r\n        /* Standard syntax */\r\n        @keyframes drain {\r\n            0%   {left:130px; top:149px;}\r\n            100% {left:-5px; top:149px;}\r\n        }\r\n    </style>\r\n    <div class=\"blob-wrapper\">\r\n        <div class=\"blob hiding\"></div>\r\n    </div>\r\n    <div class=\"blob-white-box\"></div>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" xml:space=\"preserve\">\r\n        <ellipse cx=\"223\" cy=\"70\" rx=\"100\" ry=\"30\" class=\"inside-hottub\" /><!--inn í potti-->\r\n        <ellipse cx=\"223\" cy=\"75\" rx=\"88\" ry=\"26\" class=\"blatt vatn\" /><!--vatn-->\r\n        <ellipse cx=\"223\" cy=\"151\" rx=\"100\" ry=\"30\" class=\"svart\" /><!--bottom-->\r\n        <path fill=\"black\" stroke=\"#000\" d=\"M122,74 C170,110 272,110 323,74 V150 H122\"/>\r\n        <!--<use x=\"120\" y=\"30\" href=\"#pottur\"/>-->\r\n        <line x1=\"0\" y1=\"145\" x2=\"122\" y2=\"145\" style=\"stroke-width:4\" class=\"set-active\"/><!--Slanga-->\r\n        <!--<path d=\"M 10 30 q 100 -50 160 30\" stroke=\"#d4d861\" stroke-width=\"4\" fill=\"none\" />-->\r\n    </svg>\r\n    <div class=\"water-level-text\">%</div>\r\n    <div class=\"flow-text\"> Here is the flow text</div>\r\n    <div class=\"desired\">\r\n        <span >Desired temperature</span>\r\n        <input name=\"desired-temperature\" type=\"number\" step=\"0.1\">\r\n         <span > °C</span>\r\n         \r\n            <a href=\"#\" class=\"btn-update btn btn-xs btn-info\"> <span class=\"glyphicon glyphicon-floppy-disk\"></span>&nbsp;Save </a>\r\n        \r\n    </div>\r\n    <div class=\"current-temperature\">\r\n         <span>Current temperature</span>\r\n        <span class=\"current-temperature-value\"></span>\r\n        <span > °C</span>\r\n    </div>\r\n    <div class=\"current-pressure\">\r\n        <span>Current pressure</span>\r\n        <span class=\"current-pressure-value\"></span>\r\n        <span > PSI</span>\r\n    </div>\r\n                \r\n</div>\r\n","active":true}